{{!
    This file is part of Moodle - http://moodle.org/

    Moodle is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Moodle is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
}}
{{!
    @template unilabeltype_imageboard/imageboard
    Template to show a bootstrap modal dialog.

    Example context (json):
    {
      "showintro": false,
      "intro": "",
      "images": [
        {
          "id": "9",
          "imageboardid": "1",
          "title": "",
          "url": "http:\/\/localhost:8000\/mod\/forum\/view.php?id=136",
          "xposition": "150",
          "yposition": "100",
          "targetwidth": "80",
          "targetheight": "0",
          "imageurl": {},
          "nr": 0
        },
        {
          "id": "10",
          "imageboardid": "1",
          "title": "",
          "url": "",
          "xposition": "400",
          "yposition": "200",
          "targetwidth": "0",
          "targetheight": "0",
          "imageurl": {http:\/\/localhost:8000\/mod\/forum\/view.php?id=137},
          "nr": 1
        }
      ],
      "hasimages": true,
      "cmid": "140",
      "canvaswidth": "500",
      "autocanvaswidth": false,
      "canvasheight": "600",
      "autocanvasheight": false,
      "backgroundimage": {},
      "capababilityforgrid": true,
      "showborders": true,
      "bordercolor": "#2D57FA",
      "gridcolor": "#B7009E"
    }
}}
<script>
    /**
     * This function draws the canvas for the unilabel subplugin. There can be more than one canvas on a page so the id {{cmid}} is needed.
     * An eventlistener listens to resize of the page and if width is not enought then the canvas is rezised to 90%.
     *
     */
    function drawthecanvas{{cmid}}() {
        const myCanvas = document.getElementById("unilabeltype-imageboard-canvas-{{cmid}}");
        const myContext = myCanvas.getContext("2d");
        if ( {{{canvaswidth}}} > getWidth() ) {
            newcanvaswidth = getWidth() * 0.90;
            widthfactor = newcanvaswidth / {{{canvaswidth}}};
            newcanvasheight = {{{canvasheight}}} * widthfactor ;
            myContext.canvas.width = newcanvaswidth;
            myContext.canvas.height = newcanvasheight;
        } else {
            myContext.canvas.width = {{{canvaswidth}}};
            myContext.canvas.height = {{{canvasheight}}};
        }
        window.addEventListener("resize", function(event) {
            if ({{{canvaswidth}}} > getWidth()) {
                newcanvaswidth = getWidth() * 0.90;
                widthfactor =  newcanvaswidth / {{{canvaswidth}}};
                newcanvasheight = {{{canvasheight}}} * widthfactor ;
                myContext.canvas.width = newcanvaswidth;
                myContext.canvas.height = newcanvasheight;
            } else {
            }
        }, false);
    }

    /**
     * An event listener is added so if the window is resized an the width is not enought the canvas is resized and so
     * the images have to be redrawn with resized width.
     *
     * @param tileid
     * @param imageurl
     * @param targetwidth
     * @param targetheight
     * @param xposition
     * @param yposition
     * @param url
     * @param border
     */
    function drawImage{{cmid}}(tileid, title, imageurl, targetwidth, targetheight, xposition, yposition, url, showborders) {
        const myCanvas = document.getElementById("unilabeltype-imageboard-canvas-{{cmid}}");
        const myContext = myCanvas.getContext("2d");
        const img = new Image();
        font = "20px Arial";
        titleheight = 30;
        const fillstylebackground = '#f50';
        img.src = imageurl;
        widthfactor = 1;
        img.onload = () => {
            // Calculate a resize faktor if not enough width exists to display the canvas
            if ({{{canvaswidth}}} > getWidth()) {
                newcanvaswidth = getWidth() * 0.90;
                widthfactor =  newcanvaswidth / {{{canvaswidth}}};
                newcanvasheight = {{{canvasheight}}} * widthfactor ;
            }

            if (targetwidth != 0 && targetheight != 0) {
            } else {
                if (targetheight == 0) {
                    if (targetwidth == 0) {
                        targetwidth = img.width;
                        targetheight = img.height;
                    } else {
                        faktor = targetwidth / img.width;
                        targetheight = img.height * faktor;
                    }
                } else {
                    if (targetheight == 0) {
                        targetwidth = img.width;
                        targetheight = img.height;
                    } else {
                        faktor = targetheight / img.height;
                        targetwidth = img.width * faktor;
                    }
                }
            }

            myContext.drawImage(img, xposition * widthfactor, yposition * widthfactor, targetwidth * widthfactor, targetheight * widthfactor );
            if (showborders) {
                var fill = false;
                drawBorder(myContext, xposition * widthfactor, yposition * widthfactor, targetwidth * widthfactor, targetheight * widthfactor, fill, '{{{bordercolor}}}', 0);
            }
            // Title
            if (title != '') {
                myContext.fillStyle = fillstylebackground;
                myContext.fillRect(xposition * widthfactor - 1, yposition * widthfactor - (titleheight+1), (targetwidth * widthfactor) + 1, titleheight);
                myContext.fillStyle = '#fff';
                myContext.font = font;
                myContext.fillText(title, xposition * widthfactor, yposition * widthfactor - 10);
            }


            // Add event listener for `click` events.
            myCanvas.addEventListener('click', function(event) {
                const rect = myCanvas.getBoundingClientRect();
                const x = event.clientX - rect.left;
                const y = event.clientY - rect.top;
                if ((x > xposition * widthfactor && (x < xposition * widthfactor + targetwidth * widthfactor))
                    && (y > yposition * widthfactor - titleheight && (y < yposition * widthfactor + targetheight * widthfactor))
                ) {
                    if (url){
                        //window.open(url); // Use this to open in new tab
                        window.location = url; // Use this to open in current window
                    }
                } else {
                    {{#capababilityforgrid}}
                        drawGrid{{cmid}}('{{{gridcolor}}}', 1);
                    {{/capababilityforgrid}}
                }
            }, false);
        };

        window.addEventListener("resize", function(event) {
            if ({{{canvaswidth}}} > getWidth()) {
                newcanvaswidth = getWidth() * 0.90;
                widthfactor =  newcanvaswidth / {{{canvaswidth}}};
                newcanvasheight = {{{canvasheight}}} * widthfactor ;
                myContext.drawImage(img, xposition * widthfactor, yposition * widthfactor, targetwidth * widthfactor, targetheight * widthfactor );
                if (showborders) {
                    var fill = false;
                    drawBorder(myContext, xposition * widthfactor, yposition * widthfactor, targetwidth * widthfactor, targetheight * widthfactor , fill, '{{{bordercolor}}}', 0);
                }
                // Title
                if (title != '') {
                    myContext.fillStyle = fillstylebackground;
                    myContext.fillRect(xposition * widthfactor - 1, yposition * widthfactor - (titleheight+1), (targetwidth * widthfactor) + 1, titleheight);
                    myContext.fillStyle = '#fff';
                    myContext.font = font;
                    myContext.fillText(title, xposition * widthfactor, yposition * widthfactor - 10);
                }
            }
        }, false);
    }


    function drawText{{cmid}}(title, xposition, yposition, url) {
        setTimeout(function() {
            //alert(title);
            const myCanvas = document.getElementById("unilabeltype-imageboard-canvas-{{cmid}}");
            const myContext = myCanvas.getContext("2d");

            font = "20px Arial";
            const titleheight = 30;
            const titlewidth = 150;
            const fillstylebackground = '#3399ff';

            if ({{{canvaswidth}}} > getWidth())
            {
                newcanvaswidth = getWidth() * 0.90;
                widthfactor = newcanvaswidth / {{{canvaswidth}}};
                newcanvasheight = {{{canvasheight}}} * widthfactor;
            }

            myContext.fillStyle = fillstylebackground;
            myContext.fillRect(xposition * widthfactor, yposition * widthfactor, titlewidth * widthfactor, titleheight );
            myContext.fillStyle = '#fff';
            myContext.font = font;
            myContext.fillText(title, xposition*widthfactor + 3, yposition*widthfactor+20);


            // Add event listener for `click` events.
            myCanvas.addEventListener('click', function(event) {
                const rect = myCanvas.getBoundingClientRect();
                const x = event.clientX - rect.left;
                const y = event.clientY - rect.top;
                if ((x > xposition * widthfactor && (x < xposition * widthfactor + titlewidth * widthfactor))
                        && (y > yposition * widthfactor && (y < yposition * widthfactor + titleheight))
                ) {
                    if (url != ''){
                        //window.open(url); // Use this to open in new tab
                        window.location = url; // Use this to open in current window
                    } else {
                    }
                } else {
                    //alert("keine Text angeklickt");
                    {{#capababilityforgrid}}
                        drawGrid{{cmid}}('{{{gridcolor}}}', 1);
                    {{/capababilityforgrid}}
                }
            }, false);

            window.addEventListener("resize", function(event) {
                if ({{{canvaswidth}}} > getWidth()) {
                    newcanvaswidth = getWidth() * 0.90;
                    widthfactor =  newcanvaswidth / {{{canvaswidth}}};
                    // Title
                    myContext.fillStyle = fillstylebackground;
                    myContext.fillRect(xposition * widthfactor, yposition * widthfactor, titlewidth*widthfactor, titleheight );
                    myContext.fillStyle = '#fff';
                    myContext.font = font;
                    myContext.fillText(title, xposition*widthfactor + 3, yposition*widthfactor+20);
                }
            }, false);
        }, 100, title, xposition, yposition, url);
    }

    /**
     *
     * @param ctx
     * @param x x-position of the upper left corner
     * @param y y-position of the upper left corner
     * @param width
     * @param height
     * @param fill
     * @param strokeStyle Color of the stroke to be drawn
     * @param strokeWidth
     */
    function drawBorder(ctx, x, y, width, height, fill, strokeStyle, strokeWidth) {
        ctx.beginPath()
        ctx.rect(x, y, width, height);
        ctx.shadowColor = '#000';
        ctx.shadowBlur = 0;
        ctx.shadowOffsetX = 0;
        ctx.shadowOffsetY = 0;
        if (fill) {
            ctx.fillStyle = fill
            ctx.fill()
        }
        if (strokeStyle) {
            ctx.lineWidth = strokeWidth
            ctx.strokeStyle = strokeStyle
            ctx.stroke()
        }
    }

    /**
     * Helper function to get the width of the usable browserarea.
     *
     * @returns {*|number}
     */
    function getWidth() {
        if (self.innerWidth) {
            return self.innerWidth;
        }
        if (document.documentElement && document.documentElement.clientWidth) {
            return document.documentElement.clientWidth;
        }
        if (document.body) {
            return document.body.clientWidth;
        }
    }

    /**
     * Draw a grid on the canvas to support a better positioning of images.
     * myContext.canvas.width
     * @param strokeStyle
     * @param strokeWidth
     */
    function drawGrid{{cmid}}(strokeStyle, strokeWidth) {
        const myCanvas = document.getElementById("unilabeltype-imageboard-canvas-{{cmid}}");
        const ctx = myCanvas.getContext("2d");
        widthfactor = ctx.canvas.width / {{{canvaswidth}}};
        ctx.beginPath();
        x = 1;
        y = 1;
        for (a = 1; a<15; a++) {
            for (i = 1; i<23; i++) {
                ctx.rect(x, y, 50*widthfactor, 50*widthfactor);
                x=x+50*widthfactor;
            }
            x = 1;
            y = y+50*widthfactor;
        }
        if (strokeStyle) {
            ctx.lineWidth = strokeWidth
            ctx.strokeStyle = strokeStyle;
            ctx.stroke()
        }
    }
</script>

{{#showintro}}
    {{{intro}}}
{{/showintro}}

{{#hasimages}}
    <canvas id="unilabeltype-imageboard-canvas-{{cmid}}" width="{{{canvaswidth}}}" height="{{{canvasheight}}}">
    </canvas>
    <div class="unilabeltype-imageboard-scriptcode">
        <script>
            drawthecanvas{{cmid}}();
        </script>

        <!-- Backgroundimage -->
        <script>
            drawImage{{cmid}}("0",
                "background",
                "{{{backgroundimage}}}",
                "{{{canvaswidth}}}",
                "0",
                "0",
                "0",
                "",
                false
                );
        </script>


        {{#images}}
            <script>
                {{#imageurl}}
                    drawImage{{cmid}}("{{{id}}}",
                        "{{title}}",
                        "{{{imageurl}}}",
                        "{{{targetwidth}}}",
                        "{{{targetheight}}}",
                        "{{{xposition}}}",
                        "{{{yposition}}}",
                        "{{{url}}}",
                        "{{{showborders}}}"
                );
                {{/imageurl}}

                {{^imageurl}}
                    drawText{{cmid}}('{{title}}', {{{xposition}}}, {{{yposition}}}, "{{{url}}}");
                {{/imageurl}}
            </script>
        {{/images}}

        Bilderliste und deren Links falls vorhanden:<br>
        {{#images}}
            {{#url}}
                {{#imageurl}}
                <a href="{{{url}}}">
                    <div class="row" style="margin-left:20px; max-width: 500px;">
                        <div class="mr-1">
                            {{nr}}
                        </div>
                        <div>
                            <img src="{{{imageurl}}}" width="40px" style="margin-right: 5px;" alt="{{{title}}}"></img>
                            {{{title}}}
                        </div>
                    </div>
                </a>
                {{/imageurl}}
                {{^imageurl}}
                    <a href="{{{url}}}">
                    <div class="row" style="margin-left:20px; max-width: 500px;">
                        <div class="mr-1">
                            {{nr}}
                        </div>
                        <div class="border" style="width: 40px; height: 40px; margin-right: 5px;">
                        </div>
                        <div>
                            {{{title}}}
                        </div>
                    </div>
                    </a>
                {{/imageurl}}
            {{/url}}

            {{^url}}
                <div class="row" style="margin-left:20px; max-width: 500px;">
                    <div class="mr-1">
                        {{nr}}
                    </div>
                    <div>
                        <img src="{{{imageurl}}}" width="40px;" style="margin-right: 5px;" alt="{{{title}}}"></img>
                        {{{title}}}
                    </div>
                </div>
            {{/url}}

        {{/images}}
    </div>
    <br><br>
{{/hasimages}}
{{^hasimages}}
    <span>{{#str}} nocontent , unilabeltype_imageboard {{/str}}</span>
{{/hasimages}}




